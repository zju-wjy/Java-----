115个Java面试题和答案

面向对象OOP编程
Java是一个支持并发基于类和面向对象的计算机编程语言，面向对象软件开发有以下优点：
1）代码开发模块化，更易维护和修改
2）代码复用
3）增强代码的可靠性和灵活性。
4）增加代码的可理解性

面向对象的主要特性有：封装继承多态和抽象。
1）封装给对象提供了隐藏内部特性和行为的能力，对象提供一些能被其他对象访问的方法来改变其内部数据。有三种修饰符public、private和protected，每一种给其他的位于同一包或者不同包下面的对象赋予了不同的访问权限。
	封装好处，（1）通过隐藏对象的属性来保护对象的内部状态。
			  （2）提高代码的可用性和可维护性，因为对象的行为可以被单独的改变或者扩展。
			  （3）禁止了对象之间的不良交互提高了模块化。
2）多态，多态是编程语言给不同的底层数据类型做相同的接口展示的一种能力，一个多态类型上的操作可以应用到其他类型的值上面。
3）继承，继承给对象提供了从基类获取字段和方法的能力，继承提供了代码的重用行，也可以在不修改类的情况下给现存的类添加新特性。
4）抽象，抽象把想法从具体的实例分离出来的步骤。因此要根据他们的功能而不是实现细节来创建类。Java支持创建只暴露接口而不包含方法实现的抽象的类。这种抽象技术的主要目的是把类的行为和实现细节分离开。

抽象和封装的不同：
	抽象和封装是互补的概念。一方面抽象关注对象的行为另一方面封装关注对象行为的细节。一般通过隐藏对象内部状态信息做到封装，因此封装可以看成是用来提供抽象的一种策略。

常见Java问题
1，什么是Java虚拟机？为什么Java被称为平台无关的编程语言？
	Java虚拟机是一种可以执行Java字节码的虚拟机进程，Java源文件被编译成能被Java虚拟机执行的字节码文件。

	Java被设计成允许应用程序可以运行在任意的平台，不需要程序员为每一个平台单独重写或者重新编译，Java虚拟机将这个变为可能，因为它知道底层硬件平台的指令长度和其他特性。
2，JDK和JRE的区别是什么？
	Java运行时环境（JRE)是将要执行Java程序的Java虚拟机。它同时包含了执行applet需要的浏览器插件。
	Java开发工具包（JDK）是完整的Java软件开发包，包含了JRE，编译器和其他工具，可以让开发者开发编译执行Java应用程序。
3，static关键字是什么意思？Java是否可以覆盖一个private或者static方法？
	static关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例情况下被访问。
	Java中static不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。
4，是否可以在static环境中访问非static变量？
	static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static对象，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上。
5，Java支持的数据类型有哪些？什么是自动拆装箱？
	Java语言支持8种基本数据类型：byte，short,int,long,float,double,boolean,char
	自动装箱是Java编译器在基本数据类型和对应的对象包装器之间的一个转化。比如：把int转化成Integer，double转化成double。反之则是自动拆箱。
6，Java的方法覆盖和方法重载是什么意思？
	Java中的方法重载发生在同一个类里面两个或者多个方法的方法名相同但是参数不同的情况。
	方法覆盖则是说子类重新定义了父类的方法，方法覆盖必须有相同的方法名参数列表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问。
7，Java中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？
	当新对象被创建时，构造函数会被调用。每一个类都有构造函数，如果程序员没有给类提供构造函数时Java编译器会为这个类创建一个默认的构造函数。

	Java中构造函数重载和方法重载很相似。可以为一个类构建多个构造函数，每一个构造函数必须有它自己唯一的参数列表。

	Java不支持像C++中那样的复制构造函数，这个不同点是因为如果你不自己写构造函数的情况下，Java不会创建默认的复制构造函数。
8，Java支持多继承吗？
	不支持，Java不支持多继承，每个类只能继承一个类，但是可以实现多个接口。
9，接口和抽线类的区别是什么？
	Java提供和支持创建抽象类和接口。它们的实现有共同点，不同点在于：
		1）接口中所有的方法隐含的都是抽象的，而抽象类则可以同时包含抽象和非抽象的方法。
		2）类可以实现很多个接口，但是只能继承一个抽象类。
		3）类如果要实现一个接口，它必须要实现接口声明的所有方法。但是类可以不实现抽象类声明的所有方法，当然在这种情况下，类也必须声明成是抽象的。
		4）抽象类可以在不提供接口方法实现的情况下实现接口。
		5）Java接口中声明的变量默认都是final的，抽象类中可以包含非final的变量。
		6）Java接口中的成员函数默认是public的。抽象类的成员函数可以是private，protected或者是public。
		7）接口是绝对抽象的，不可以被实例化。抽象类也不可以被实例化但是如果它包含main方法的话是可以被调用的。
10，什么是值传递和引用传递？
	对象被值传递，意味着传递了对象的一个副本。因此就算是改变了对象副本也不会影响源对象的值。
	对象被引用传递，意味着传递的并不是实际的对象而是对象的引用。因此外部对引用对象的改变或反映到所有的对象上。

Java线程相关知识
11，进程和线程的区别？
	进程是执行着的应用程序，而线程是进程的一个执行序列，一个进程可以有多个线程。线程又叫轻量级进程。
12，创建线程的方式
	创建线程有三种方式：
	1）继承Thread类
	2）实现Runnable接口
	3）应用程序可以使用Executor矿建来创建线程池

	实现Runnable接口的方式更受欢迎，因为不需要继承Thread类，在应用设计中已经继承了别的对象的情况下，这需要多继承（而Java不支持多继承），只能实现接口。同时线程池也是一种非常高效的容易实现和使用的方法。
13，概括的解释线程的几种可用状态
	线程在执行过程，可以处于下面几种状态：
		就绪(Runnable)：线程准备运行，不一定马上就开始执行。
		运行中(Running)：进程处于执行线程的代码。
		等待中(Waiting)：线程处于阻塞状态，等待外部的处理结束。
		睡眠中(Sleeping)：线程被强制睡眠。
		I/O阻塞(Blocked on I/O)：等待I/O操作完成。
		同步阻塞(Blocked on Synchronization)：等待获取锁。
		死亡(Dead)：线程完成了执行。
14，同步方法和同步代码块的区别是什么？
	在Java语言中，每一个对象都有一把锁，线程可以使用synchronized关键字获取对象上的锁，synchronized关键字可应用在方法级别或者是代码块级别。
15，在监视器内部，是如何做线程同步的？程序应该做哪种级别的同步？
	监视器和锁在Java虚拟机中是一块使用的，监视器监视一块同步代码块，确保一次只有一个线程执行同步代码块，每一个监视器和一个对象引用相关联，线程在获取锁之前不允许执行同步代码块。
16，什么是死锁？
	两个进程都在等待对方执行完毕才能继续往下执行的时候就发生了死锁，结果就是两个进程都陷入了无限的等待中。
17，如何确保N个线程可以访问N个资源而同步是导致死锁？
	使用多线程的时候，一种非常简单避免死锁的方法就是指定获取锁的顺序，并强制线程按照指定的顺序获取锁。因此如果所有的线程都是以同样的顺序加载和释放锁就不会出现死锁了。

Java集合类
18，Java集合类提供了一套设计良好的支持对一组对象进行操作的接口和类。
	Java集合类里面最基本的接口有：
		Collection：代表一组对象，每一个对象都是它的子元素。
		Set：不包含重复元素的Collection。
		List：有顺序的Collection，并且可以包含重复元素。
		Map：可以把键(key)映射到值(value)的对象，键不能重复。
19，为什么集合类没有实现Cloneable和Serializable接口？
	集合类接口指定了一组叫做元素的对象，集合类接口的每一种具体的实现类都可以选择以它自己的方式对元素进行保存和排序，有的集合类允许重复的键，有些不允许。
20，什么是迭代器(Iterator)？
	Iterator接口提供了很多对集合元素进行迭代的方法，每一个集合类都包含了可以返回迭代器实例的迭代方法。迭代器可以在迭代的过程中删除底层集合的元素。

	克隆或者序列化(serialization)的语义和含义是跟具体的实现相关的。因此，应该由集合类的具体实现来决定如何被克隆或者序列化。
	序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决在对对象流进行读写操作时所引发的问题。
21，Iterator和ListIterator的区别是什么？
	1）Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。
	2）Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。
	3）ListIterator实现了Iterator接口，并包含其他的功能，比如增加元素替换元素，获取前一个和后一个元素的索引等。
22，快速失败和安全失败的区别是什么？
	Iterator的安全失败是基于对底层集合做拷贝，因此它不受源集合上修改的影响。java.util包下面的所有集合类型都是快速失败的，而java.util.concurrent包下面的所有类都是安全失败的。快速失败的迭代器会抛出ConcurrentModificationException异常，而安全失败的迭代器永远不会抛出这样的异常。
23，Java中的HashMap的工作原理是什么？
	Java中的HashMap是以键值对的形式存储元素的。HashMap需要一个hash函数，它使用hashCode()和equals()方法来向集合/从集合添加和索引元素，当调用put()方法的时候，HashMap会会计算key的hash值，然后把键值对存储在集合中合适的索引上。如果key已经存在了，value对被更新成新值。HashMap的一些重要特性是它的容量，负载因子和扩容极限。
24，hashCode()和equals()方法的重要性体现在什么地方？
	Java中的HashMap使用hashCode()和equals()方法来确定键值对的索引，当根据键获取值的时候也会用到这两个方法。如果没有正确的实现这两个方法，两个不同的键可能会有相同的hash值，因此可能会被集合认为是相等的。而且这两个方法也用来发现重复元素。所以这两个方法的实现对HashMap的精确性和正确性都至关重要。
25，HashMap和Hashtable有什么区别？
	HashMap和Hashtable都实现了Map接口，因此很多特性都十分相似，但是他们有以下不同点：
		1）HashMap允许键和值是null而Hashtable不允许键或者值是null。
		2）Hashtable是同步的，而HashMap不是。因此HashMap更适合于单线程环境，而Hashtable适合于多线程环境。
		3）HashMap提供了可供应用迭代的键的集合，因此HashMap是快速失败的。另一方面，Hashtable提供了对键的列举，一般认为Hashtable是一个遗留的类。
26，数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？
	数组和列表的区别：
		1）数组可以包含基本类型和对象类型，列表只能包含对象类型。
		2）数组大小是固定的，列表的大小是动态变化的。
		3）列表提供了更多的方法和特性。
	对于基本类型数据，集合使用自动装箱来减少编码工作量。但是当处理固定大小的基本数据类型的时候，这种方式比较慢。
27，ArrayList和LinkedList有什么区别?
	ArrayList和LinkedList都实现了List接口，他们有以下不同点：
		1）ArrayList是基于索引的数据接口，它的底层是数组
		2）相对于ArrayList，LinkedList的插入添加和删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者更新呢索引
		3）LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素一个指向下一个元素。
28，Comparable和Comparator接口是干什么的》两者有何区别。
	Java提供了只包含一个compareTo方法的Comparable接口，这个方法可以给两个对象排序。具体来说，它返回负数，0，正数来表明输入对象小于等于或者大于已经存在的对象。

	Java提供了包含compare()和equals()两个方法的Comparator接口。compare()方法用来给两个输入参数排序，返回负数0或者正数。equals()方法需要一个对象作为参数，它用来决定输入参数是否和comparator相等。只有当输入参数也是一个comparator并且输入参数和当前comparator的排序结果是相同的时候，这个方法才返回true。
	31，如何权衡是使用无序的数组还是有序的数组？
		有序数组最大的好处在于查找的时间复杂度是O(log n)，而无序数组是O(n)。有序数组的缺点是插入操作的时间复杂度是O(n)，因为值大的元素需要往后移动来给新元素腾位置。相反，无序数组的插入时间复杂度是常量O(1)。
32，Java集合类框架的最佳实践有哪些？
		1）根据应用的需要正确选择要使用的集合的类型对性能非常重要，比如：假如元素的大小是固定的，而且能事先知道，我们就应该用Array而不是ArrayList。
		2）有些集合类允许指定初始容量。因此，如果我们能估计出存储的元素的数目，我们可以设置初始容量来避免重新计算hash值或者是扩容。
		3）为了类型安全，可读性和健壮性的原因总是要使用泛型。同时，使用泛型还可以避免运行时的ClassCastException。
		4）使用JDK提供的不变类(immutable class)作为Map的键可以避免为我们自己的类实现hashCode()和equals()方法。
		5）编程的时候接口优于实现。
		6）底层的集合实际上是空的情况下，返回长度是0的集合或者是数组，不要返回null。
33，Enumeration接口和Iterator接口的区别有哪些？
	Enumeration速度是Iterator的2倍，同时占用更少的内存。但是，Iterator远远比Enumeration安全，因为其他线程不能够修改正在被iterator遍历的集合里面的对象。同时，Iterator允许调用者删除底层集合里面的元素，这对Enumeration来说是不可能的。
34，HashSet和TreeSet有什么区别？
	HashSet是由一个hash表来实现的，因此，它的元素是无序的。add()，remove()，contains()方法的时间复杂度是O(1)。

	另一方面，TreeSet是由一个树形的结构来实现的，它里面的元素是有序的。因此，add()，remove()，contains()方法的时间复杂度是O(logn)。

垃圾收集器(Garbage Collectors)
35，Java中垃圾回收有什么目的？什么时候进行垃圾回收？
	垃圾回收的目的是识别并且丢弃应用不再使用的对象来释放和重用资源。
36，System.gc()和Runtime.gc()会做什么事情？
	这两个方法用来提示JVM要进行垃圾回收。但是，立即开始还是延迟进行垃圾回收是取决于JVM的。
37，finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？
	在释放对象占用的内存之前，垃圾收集器会调用对象的finalize()方法。一般建议在该方法中释放对象持有的资源。
38，如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？
	不会，在下一个垃圾回收周期中，这个对象将是可被回收的。
39，Java堆的结构是什么样子的？什么是堆中的永久代(Perm Gen space)?
	JVM的堆是运行时数据区，所有类的实例和数组都是在堆上分配内存。它在JVM启动的时候被创建。对象所占的堆内存是由自动内存管理系统也就是垃圾收集器回收。

	堆内存是由存活和死亡的对象组成的。存活的对象是应用可以访问的，不会被垃圾回收。死亡的对象是应用不可访问尚且还没有被垃圾收集器回收掉的对象。一直到垃圾收集器把这些对象回收掉之前，他们会一直占据堆内存空间。
41，在Java中，对象什么时候可以被垃圾回收？
	当对象对当前使用这个对象的应用程序变得不可触及的时候，这个对象就可以被回收了。
42，JVM的永久代中会发生垃圾回收么？
	垃圾回收不会发生在永久代，如果永久代满了或者是超过了临界值，会触发完全垃圾回收(Full GC)。如果你仔细查看垃圾收集器的输出信息，就会发现永久代也是被回收的。这就是为什么正确的永久代大小对避免Full GC是非常重要的原因。